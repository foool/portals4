Portals 4 Reference Implementation
----------------------------------

* About

* Building

Portals utilizes the Autoconf/Automake/Libtool build system.  The
standard GNU configure script ane make system is used to build Portals
4.  To build:

  % ./configure <options>
  % make
  % make check
  % make install

The "make check" step is not strictly necessary, but is a good idea.

Options to configure include:

  --prefix=<DIR>          Install implementation in <DIR>


* Portals 4 Implementation Notes

  - Shared Memory (shmem)

    Limits. The call PtlNIInit() accepts a desired set of limits and
    returns a set of actual limits. The acceptable ranges for these
    limits are:

	max_entries > 0 && < 134217728
	max_unexpected_headers > 0
	max_mds > 0 && < 134217728
	max_cts > 0 && < 134217728
	max_eqs > 0 && < 134217728
	max_pt_index >= 63
	max_list_size > 0 && < 4294967296
	max_triggered_ops > 0 && < 4294967296
	max_msg_size > 0 && < UINT32_MAX
	max_atomic_size >= 8
	max_fetch_atomic_size >= 8
	max_ordered_size >= 8

    Resource Usage. (Describe the memory impact of the above limit settings)

    Status Registers.
	The following status regusters are available:
	- PTL_SR_DROP_COUNT
	- PTL_SR_PERMISSIONS_VIOLATIONS

    Network interfaces.
	The following network interfaces are available:
	- PTL_IFACE_DEFAULT

    Job identifiers.
	Job identifiers are random numbers generated by yod.

  - InfiniBand (w/ shared memory support)

    Pre-requisite
      + openmpi 1.4.x or 1.5.x: the test program is MPI based, and
        starting a task necessitate mpirun.
      + only if using XRC: OFED 1.5.2 with patches to librdmacm (see
        patches/rdmacm-xrc-v?.diff). patches/rdma-bw-xrc-v?.diff is not necessary,
        but allows to test XRC+RDMA CM with the rdma_bw test.
      + libev-4.0.4 (or similar), available at
        http://software.schmorp.de/pkg/libev.html
      + The KNEM driver from http://runtime.bordeaux.inria.fr/knem/.  (optional)
        Ensure that /dev/knem is readable/writable by the user running the portals software. 

    Build:
      * ./autogen.sh
      * i686: 
	  ./configure CFLAGS="-march=i686 -I/usr/lib/openmpi/include/" LDFLAGS="-L/usr/lib/openmpi/lib/"
      * x86_64:
          ./configure CFLAGS="-I/usr/lib/openmpi/include/" LDFLAGS="-L/usr/lib/openmpi/lib/"
         or:
          ./configure CFLAGS="-I/usr/lib64/openmpi/1.4-gcc/include" LDFLAGS="-L/usr/lib64/openmpi/1.4-gcc/lib"
      * add --enable-xrc if XRC support is desired.
      * make

    Test :
      * cd test
      * standalone tests:
        mpirun  -H localhost ./test_all.sh
      * with 2 ranks:
        mpirun  -H localhost -n 2 ./test_all_2_ranks.sh
      * make_test_relay.pl can build a special script for a given amount
        of ranks. Use mpirun to start the test:
         -  ./make_test_relay.pl  > test_relay.xml
         -  mpirun  -H localhost -n 9 ./ptl_test -f test_relay.xml 

    Testsuite note:
      The testsuite is testing both error paths and good
      paths. However when the library is configured with --enable-fast
      (such as built from the RPM), most parameter checks are
      disabled. As a result a lot of the negative tests cannot pass
      (or make the program crash).  There is 2 solutions there:
      - either do not configure with --enable-fast
      - configure with --enable-fast but undefine NO_ARG_VALIDATION in config.h

    Building an RPM:
      * make dist       --> this will create portals-4.0.tar.gz
      * rpmbuild -ta portals-4.0.tar.gz

    If mpi is in a non standard path, add CFLAGS and LDFLAGS to rpmbuild, such as:
      CFLAGS="-I/usr/lib64/openmpi/1.4-gcc/include" LDFLAGS=-L/usr/lib64/openmpi/1.4-gcc/lib 

    Limitations:
      * A program may not open more than one NID in its lifetime.
